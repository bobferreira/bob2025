Objective: Develop a Fullstack application for managing events, using Java
with Spring on the backend and React with hooks on the frontend. The
challenge aims to assess your backend and frontend development skills, as
well as your choice of database and styling.
Challenge Requirements
Functionality:
• Develop a CRUD (Create, Read, Update, Delete) system to manage events.
• Each event must have the following attributes:
o id: Automatically generated sequential identifier.
o title: A string field that stores the event name.
o startDate: Date and time when the event starts.
o endDate: Date and time when the event ends.
o price: The cost in currency to participate in the event.
o status: Can have one of three values: "Started", "Completed", or
"Paused".
Rules:
• Events cannot be created with an endDate that is before the startDate.
• When updating an event, the application must allow changing its status.
Backend (Java with Spring):
• Use Spring Boot to create the RESTful API.
• Implement the necessary endpoints for the event CRUD operations.
• Persist data in a database of your choice (relational or NoSQL).
• Use Hibernate or another ORM tool to map the data.
• Implement proper error handling and return appropriate responses (e.g., 400
Bad Request for invalid data).
• Use o profile `dev` para desenvolvimento local, que utiliza H2 em memória (não requer instalação de banco externo).
• Use o profile `prod` para produção, que utiliza PostgreSQL. As credenciais e URL do banco podem ser configuradas via variáveis de ambiente:
  - DATABASE_URL
  - DATABASE_USERNAME
  - DATABASE_PASSWORD
• O projeto já está pronto para ambos os bancos, basta mudar o profile na execução do backend.
• O Docker Compose utiliza o profile `docker` e inicializa o PostgreSQL automaticamente.
Frontend (React with Hooks):
• Use React to develop the user interface.
• The interface must allow creating, viewing, editing, and deleting events.
• Use React Hooks for state management.
• Styling is up to you (CSS, frameworks like Bootstrap, Material UI, etc.).
• The frontend should consume the backend API to perform CRUD operations.
Optional Requirements:
• The use of Docker to configure and run the environment is optional but will be
viewed positively. If used, include the configuration files (Dockerfile and docker-
compose.yml) and document how to run the application with Docker.
• The inclusion of automated tests is optional but encouraged. If included, provide
clear instructions on how to run the tests.
Deliverables
• A Git repository with the project’s code (preferably on GitHub or GitLab).
• A README.md file containing:
o Instructions on how to run the application (both backend and frontend).
o Technical decisions about the database, styling, and tools used.
o Information about the application’s functionality and any additional
relevant points.
o If Docker is used, explain the steps to run the application with it.
Evaluation Criteria
• Complete CRUD functionality for events.
• Code organization and clarity.
• Choice of database and justification.
• Quality of the user interface and experience.
• Error handling and validation.
• Git commit structure.
• Optional use of Docker to simplify setup and environment execution.
Estimated Time
• We recommend completing the challenge within 5 days.